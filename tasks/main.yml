---
- name: install software
  package:
    name: "{{ item }}"
  with_items:
    - "{{ dns_configuration[ansible_distribution]['packages']
      | default(dns_configuration['default']['packages'] ) }}"

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ dns_configuration[ansible_distribution]['datadir']
      | default(dns_configuration['default']['datadir'] ) }}'
    - "{{ dns_configuration[ansible_distribution]['confdir']
      | default(dns_configuration['default']['confdir'] ) }}'

- name: create group
  group:
    name: "{{ dns_configuration[ansible_distribution]['group']
          | default(dns_configuration['default']['group'] ) }}"

- name: create user
  user:
    name: "{{ dns_configuration[ansible_distribution]['owner']
          | default(dns_configuration['default']['owner'] ) }}"
    system: yes

- name: generate rndc key
  command: rndc-confgen -a -c "{{ dns_configuration[ansible_distribution]['confdir'] | default(dns_configuration['default']['confdir'] ) }}/rndc.key"
  args:
    creates: "{{ dns_configuration[ansible_distribution]['confdir'] | default(dns_configuration['default']['confdir'] ) }}/rndc.key"

- name: set permissions on rndc key file
  file:
    path: "{{ dns_configuration[ansible_distribution]['confdir'] | default(dns_configuration['default']['confdir'] ) }}/rndc.key"
    owner: "{{ dns_configuration[ansible_distribution]['owner'] | default(dns_configuration['default']['owner'] ) }}"
    group: "{{ dns_configuration[ansible_distribution]['group'] | default(dns_configuration['default']['group'] ) }}"

- name: get most recent version of the hints/root file
  get_url:
    url: https://www.internic.net/domain/named.root
    dest: "{{ dns_configuration[ansible_distribution]['datadir'] | default(dns_configuration['default']['datadir'] ) }}/named.root"
  when:
    - dns_caching_dns == true
  notify:
    reload zones

- name: create zone files
  template:
    src: zone.j2
    dest: "{{ dns_configuration[ansible_distribution]['datadir'] | default(dns_configuration['default']['datadir'] ) }}/{{ item.name }}.conf"
  with_items:
    - "{{ dns_zones }}"
  notify:
    reload zones
  loop_control:
    label: "{{ item.name }}"

- name: add zones to configuration
  template:
    src: named.conf.j2
    dest: "{{ dns_configuration[ansible_distribution]['confdir'] | default(dns_configuration['default']['confdir'] ) }}/named.conf"
    validate: named-checkconf -zj %s
  notify:
    reload configuration

- name: start and enable software
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - "{{ dns_configuration[ansible_distribution]['service']
          | default(dns_configuration['default']['service'] ) }}"
  when:
    - ansible_virtualization_type != "docker"
